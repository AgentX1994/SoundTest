use lazy_static::lazy_static;
const TABLE_SIZE: usize = 256;

lazy_static! {
    static ref SAW_WAVE_TABLE: [f64; TABLE_SIZE] = {
        let mut array = [0.0; TABLE_SIZE];

        let half_table_size = TABLE_SIZE as f64 / 2.0;
        for i in 0..TABLE_SIZE {
            array[i] = i as f64 / half_table_size - 1.0;
        }

        array
    };
}

/// A Wave Table based Saw oscillator
#[derive(Clone, Debug, Default)]
pub struct SawOscillator {
    /// frequency generated by this oscillator
    frequency: f64,
    /// Sample rate of the audio stream
    sample_rate: u64,
    /// Current index into wave table
    index: f64,
    /// amount to move every sample
    delta: f64,
}

impl SawOscillator {
    pub fn new(frequency: f64, sample_rate: u64) -> Self {
        let mut s = Self::default();
        s.cook_frequency(frequency, sample_rate);
        s.index = 0.0;
        s
    }

    pub fn set_frequency(&mut self, frequency: f64) {
        self.cook_frequency(frequency, self.sample_rate);
    }

    pub fn get_frequency(&self) -> f64 {
        self.frequency
    }

    pub fn set_sample_rate(&mut self, sample_rate: u64) {
        self.cook_frequency(self.frequency, sample_rate);
    }

    pub fn get_sample_rate(&self) -> u64 {
        self.sample_rate
    }

    fn cook_frequency(&mut self, frequency: f64, sample_rate: u64) {
        self.sample_rate = sample_rate;
        self.frequency = frequency;
        self.delta = frequency * (TABLE_SIZE as f64 / sample_rate as f64);
    }

    pub fn step(&mut self) -> f64 {
        let index0 = self.index as usize;
        let index1 = if index0 == TABLE_SIZE - 1 {
            0
        } else {
            index0 + 1
        };

        let frac = self.index - index0 as f64;

        let sample =
            SAW_WAVE_TABLE[index0] + frac * (SAW_WAVE_TABLE[index1] - SAW_WAVE_TABLE[index0]);

        self.index += self.delta;
        if self.index >= TABLE_SIZE as f64 {
            self.index -= TABLE_SIZE as f64;
        }

        sample
    }
}
